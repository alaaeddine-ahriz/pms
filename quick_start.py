#!/usr/bin/env python3
"""
Script de d√©marrage rapide pour PMS Protection Incendie
Initialise la base de donn√©es avec des donn√©es d'exemple
"""
import asyncio
from datetime import date
from sqlalchemy.orm import Session
from database import create_tables, SessionLocal
from models import *


def create_sample_data():
    """Cr√©e des donn√©es d'exemple pour tester l'API"""
    db = SessionLocal()
    
    try:
        print("üöÄ Cr√©ation des donn√©es d'exemple...")
        
        # Cr√©er des devises
        devises = [
            Devise(code="MAD", libelle="Dirham Marocain"),
            Devise(code="EUR", libelle="Euro"),
            Devise(code="USD", libelle="Dollar Am√©ricain")
        ]
        
        for devise in devises:
            existing = db.query(Devise).filter(Devise.code == devise.code).first()
            if not existing:
                db.add(devise)
                print(f"üí∞ Devise ajout√©e: {devise.code}")
        
        # Cr√©er des cat√©gories de d√©penses
        categories = [
            ExpenseCategory(libelle="CARBURANT"),
            ExpenseCategory(libelle="MAINTENANCE"),
            ExpenseCategory(libelle="FOURNITURES"),
            ExpenseCategory(libelle="TRANSPORT"),
            ExpenseCategory(libelle="REPAS")
        ]
        
        for category in categories:
            existing = db.query(ExpenseCategory).filter(ExpenseCategory.libelle == category.libelle).first()
            if not existing:
                db.add(category)
                print(f"üìã Cat√©gorie ajout√©e: {category.libelle}")
        
        # Cr√©er des statuts
        statuts_fab = [
            StatutFabrication(libelle="EN_ATTENTE"),
            StatutFabrication(libelle="EN_COURS"),
            StatutFabrication(libelle="TERMINE"),
            StatutFabrication(libelle="SUSPENDU")
        ]
        
        for statut in statuts_fab:
            existing = db.query(StatutFabrication).filter(StatutFabrication.libelle == statut.libelle).first()
            if not existing:
                db.add(statut)
                print(f"üè≠ Statut fabrication ajout√©: {statut.libelle}")
        
        statuts_liv = [
            StatutLivraison(libelle="PLANIFIEE"),
            StatutLivraison(libelle="EN_TRANSIT"),
            StatutLivraison(libelle="LIVREE"),
            StatutLivraison(libelle="RETARDEE")
        ]
        
        for statut in statuts_liv:
            existing = db.query(StatutLivraison).filter(StatutLivraison.libelle == statut.libelle).first()
            if not existing:
                db.add(statut)
                print(f"üöö Statut livraison ajout√©: {statut.libelle}")
        
        statuts_appro = [
            StatutAppro(libelle="DEMANDEE"),
            StatutAppro(libelle="VALIDEE"),
            StatutAppro(libelle="COMMANDEE"),
            StatutAppro(libelle="RECUE")
        ]
        
        for statut in statuts_appro:
            existing = db.query(StatutAppro).filter(StatutAppro.libelle == statut.libelle).first()
            if not existing:
                db.add(statut)
                print(f"üì¶ Statut appro ajout√©: {statut.libelle}")
        
        # Cr√©er des fonctions d'employ√©s
        fonctions = [
            FonctionEmploye(libelle="CHEF_CHANTIER", description="Chef de chantier"),
            FonctionEmploye(libelle="TECHNICIEN", description="Technicien installation"),
            FonctionEmploye(libelle="CONDUCTEUR", description="Conducteur v√©hicule"),
            FonctionEmploye(libelle="ADMINISTRATIF", description="Personnel administratif"),
            FonctionEmploye(libelle="COMMERCIAL", description="Commercial")
        ]
        
        for fonction in fonctions:
            existing = db.query(FonctionEmploye).filter(FonctionEmploye.libelle == fonction.libelle).first()
            if not existing:
                db.add(fonction)
                print(f"üë§ Fonction ajout√©e: {fonction.libelle}")
        
        # Cr√©er des entreprises
        entreprises = [
            Entreprise(raison_sociale="ONCF", adresse="Rabat, Maroc", ice="123456789"),
            Entreprise(raison_sociale="OCP Group", adresse="Casablanca, Maroc", ice="987654321"),
            Entreprise(raison_sociale="Suplec Maroc", adresse="Rabat, Maroc", ice="456789123")
        ]
        
        for entreprise in entreprises:
            existing = db.query(Entreprise).filter(Entreprise.raison_sociale == entreprise.raison_sociale).first()
            if not existing:
                db.add(entreprise)
                print(f"üè¢ Entreprise ajout√©e: {entreprise.raison_sociale}")
        
        # Cr√©er des tags de documents
        tags = [
            TagDocument(libelle="CONTRAT", description="Documents contractuels"),
            TagDocument(libelle="FACTURE", description="Factures et documents comptables"),
            TagDocument(libelle="TECHNIQUE", description="Documents techniques"),
            TagDocument(libelle="PHOTO", description="Photos de chantier"),
            TagDocument(libelle="CERTIF", description="Certificats et agr√©ments")
        ]
        
        for tag in tags:
            existing = db.query(TagDocument).filter(TagDocument.libelle == tag.libelle).first()
            if not existing:
                db.add(tag)
                print(f"üè∑Ô∏è Tag ajout√©: {tag.libelle}")
        
        # Cr√©er un stock par d√©faut
        stock_principal = Stock(libelle="Stock Principal", adresse="Entrep√¥t principal - Casablanca")
        existing_stock = db.query(Stock).filter(Stock.libelle == stock_principal.libelle).first()
        if not existing_stock:
            db.add(stock_principal)
            print(f"üì¶ Stock ajout√©: {stock_principal.libelle}")
        
        # Cr√©er quelques produits d'exemple
        produits = [
            Produit(code_produit="EXT001", libelle="Extincteur 6L", description="Extincteur √† poudre 6L"),
            Produit(code_produit="DET001", libelle="D√©tecteur fum√©e", description="D√©tecteur de fum√©e optique"),
            Produit(code_produit="TUY001", libelle="Tuyau incendie 20m", description="Tuyau d'incendie 20 m√®tres")
        ]
        
        for produit in produits:
            existing = db.query(Produit).filter(Produit.code_produit == produit.code_produit).first()
            if not existing:
                db.add(produit)
                print(f"üîß Produit ajout√©: {produit.code_produit}")
        
        # Commiter toutes les donn√©es
        db.commit()
        print("‚úÖ Donn√©es d'exemple cr√©√©es avec succ√®s!")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es: {e}")
        
    finally:
        db.close()


def main():
    """Point d'entr√©e principal"""
    print("üöÄ PMS Protection Incendie - D√©marrage rapide")
    print("=" * 50)
    
    print("\n1. Cr√©ation des tables...")
    try:
        create_tables()
        print("‚úÖ Tables cr√©√©es avec succ√®s!")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return
    
    print("\n2. Cr√©ation des donn√©es d'exemple...")
    create_sample_data()
    
    print("\nüéâ D√©marrage rapide termin√©!")
    print("\nüìã Prochaines √©tapes:")
    print("1. D√©marrer l'API: python3 main.py")
    print("2. Ouvrir la documentation: http://localhost:8000/docs")
    print("3. Tester la connexion: admin@example.com / password123")


if __name__ == "__main__":
    main() 