/***********************************************************************
  Base de données – PMS Incendie
  SGBD : PostgreSQL 15
  Conventions : snake_case, clés BIGINT, identity columns,
                created_at / updated_at par défaut gérés en trigger.
***********************************************************************/

/* ======================= 1. RÉFÉRENTIELS ========================== */

CREATE TABLE devise (
    code        CHAR(3) PRIMARY KEY,              -- ISO-4217
    libelle     TEXT NOT NULL
);

CREATE TABLE entreprise (
    id_entreprise  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    raison_sociale TEXT NOT NULL,
    adresse        TEXT,
    ice            VARCHAR(20)
);

CREATE TABLE fonction_employe (
    id_fonction  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle      TEXT NOT NULL,
    description  TEXT
);

CREATE TABLE expense_category (
    id_cat   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle  TEXT UNIQUE NOT NULL
);

CREATE TABLE tag_document (
    id_tag      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle     TEXT UNIQUE NOT NULL,
    description TEXT
);

CREATE TABLE statut_fabrication (
    id_statut BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle   TEXT UNIQUE NOT NULL
);

CREATE TABLE statut_livraison (
    id_statut BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle   TEXT UNIQUE NOT NULL
);

CREATE TABLE statut_appro (
    id_statut BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle   TEXT UNIQUE NOT NULL
);

/* ======================= 2. DOCUMENTS ============================= */

CREATE TABLE document (
    id_document BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    file_path   TEXT NOT NULL,
    mime_type   TEXT,
    checksum    TEXT,
    size_bytes  BIGINT,
    uploaded_by BIGINT,                                -- FK employe après définition
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at  TIMESTAMPTZ
);

CREATE TABLE document_tag (
    id_document BIGINT NOT NULL REFERENCES document ON DELETE CASCADE,
    id_tag      BIGINT NOT NULL REFERENCES tag_document ON DELETE CASCADE,
    PRIMARY KEY (id_document, id_tag)
);

/* ======================= 3. RESSOURCES HUMAINES =================== */

CREATE TABLE employe (
    id_employe     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cin_numero     VARCHAR(20) UNIQUE,
    id_doc_cin     BIGINT REFERENCES document,
    nom            TEXT NOT NULL,
    prenom         TEXT NOT NULL,
    etat_civil     TEXT,
    id_doc_permis  BIGINT REFERENCES document,
    date_naissance DATE,
    salaire_net    NUMERIC(12,2),
    id_fonction    BIGINT REFERENCES fonction_employe,
    created_at     TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at     TIMESTAMPTZ
);

ALTER TABLE document
    ADD CONSTRAINT fk_document_uploader
    FOREIGN KEY (uploaded_by) REFERENCES employe;

/* ---------- Tâches ---------- */

CREATE TABLE task (
    id_task            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description_courte TEXT NOT NULL,
    description_longue TEXT,
    date_creation      TIMESTAMPTZ NOT NULL DEFAULT now(),
    date_echeance      TIMESTAMPTZ
);

CREATE TABLE task_assignment (
    id_task    BIGINT REFERENCES task   ON DELETE CASCADE,
    id_employe BIGINT REFERENCES employe ON DELETE CASCADE,
    PRIMARY KEY (id_task, id_employe)
);

CREATE TABLE task_dependency (
    id_parent_task BIGINT REFERENCES task ON DELETE CASCADE,
    id_child_task  BIGINT REFERENCES task ON DELETE CASCADE,
    PRIMARY KEY (id_parent_task, id_child_task)
);

CREATE TABLE task_document (
    id_task     BIGINT REFERENCES task     ON DELETE CASCADE,
    id_document BIGINT REFERENCES document ON DELETE CASCADE,
    PRIMARY KEY (id_task, id_document)
);

/* ======================= 4. PARC VÉHICULES ======================== */

CREATE TABLE voiture (
    id_voiture     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    immatriculation VARCHAR(15) UNIQUE,
    modele          TEXT,
    marque          TEXT,
    id_carte_grise  BIGINT REFERENCES document,
    id_assurance    BIGINT REFERENCES document,
    created_at      TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE voiture_km_log (
    id_voiture  BIGINT REFERENCES voiture ON DELETE CASCADE,
    date_releve DATE NOT NULL,
    kilometrage NUMERIC(10,1) NOT NULL,
    PRIMARY KEY (id_voiture, date_releve)
);

CREATE TABLE voiture_conducteur (
    id_voiture BIGINT REFERENCES voiture ON DELETE CASCADE,
    id_employe BIGINT REFERENCES employe ON DELETE CASCADE,
    date_debut DATE NOT NULL,
    date_fin   DATE,
    PRIMARY KEY (id_voiture, id_employe, date_debut)
);

/* ======================= 5. MATÉRIEL ============================== */

CREATE TABLE materiel (
    id_materiel BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_facture  BIGINT REFERENCES document
);

CREATE TABLE materiel_document (
    id_materiel BIGINT REFERENCES materiel ON DELETE CASCADE,
    id_document BIGINT REFERENCES document ON DELETE CASCADE,
    PRIMARY KEY (id_materiel, id_document)
);

/* ======================= 6. PRODUITS & STOCK ====================== */

CREATE TABLE produit (
    id_produit   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code_produit TEXT UNIQUE,
    libelle      TEXT,
    description  TEXT
);

CREATE TABLE produit_fournisseur (
    id_produit    BIGINT REFERENCES produit    ON DELETE CASCADE,
    id_entreprise BIGINT REFERENCES entreprise ON DELETE CASCADE,
    PRIMARY KEY (id_produit, id_entreprise)
);

CREATE TABLE article (
    id_article BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_produit BIGINT REFERENCES produit
);

/* Dépôts physiques / virtuels */
CREATE TABLE stock (
    id_stock BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle  TEXT,
    adresse  TEXT
);

/* Mouvements double-entrée */
CREATE TABLE stock_move (
    id_move      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_article   BIGINT NOT NULL REFERENCES article,
    src_stock    BIGINT REFERENCES stock,   -- NULL => entrée externe
    dst_stock    BIGINT REFERENCES stock,   -- NULL => sortie externe
    qty          NUMERIC(12,3) NOT NULL CHECK (qty > 0),
    unit_cost    NUMERIC(14,4),
    currency     CHAR(3) REFERENCES devise,
    date_move    TIMESTAMPTZ NOT NULL DEFAULT now(),
    ref_document BIGINT REFERENCES document
);

/* Vue matérialisée d’inventaire */
CREATE MATERIALIZED VIEW stock_inventory AS
SELECT
    s.id_stock,
    a.id_article,
    SUM(
        CASE WHEN sm.dst_stock = s.id_stock THEN sm.qty
             WHEN sm.src_stock = s.id_stock THEN -sm.qty
        END
    ) AS qty_available
FROM stock_move sm
JOIN stock    s ON (s.id_stock = sm.dst_stock OR s.id_stock = sm.src_stock)
JOIN article  a ON a.id_article = sm.id_article
GROUP BY s.id_stock, a.id_article;

/* ======================= 7. PROJETS =============================== */

CREATE TABLE site_client (
    id_site_client BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    adresse        TEXT,
    id_client      BIGINT REFERENCES entreprise
);

CREATE TABLE projet (
    id_projet       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    adresse         TEXT,
    date_debut      DATE,
    id_site_client  BIGINT REFERENCES site_client,
    id_chef_chantier BIGINT REFERENCES employe,
    id_icone        BIGINT REFERENCES document
);

CREATE TABLE projet_voiture (
    id_projet  BIGINT REFERENCES projet  ON DELETE CASCADE,
    id_voiture BIGINT REFERENCES voiture ON DELETE CASCADE,
    PRIMARY KEY (id_projet, id_voiture)
);

CREATE TABLE projet_materiel (
    id_projet   BIGINT REFERENCES projet   ON DELETE CASCADE,
    id_materiel BIGINT REFERENCES materiel ON DELETE CASCADE,
    PRIMARY KEY (id_projet, id_materiel)
);

CREATE TABLE projet_document (
    id_projet   BIGINT REFERENCES projet   ON DELETE CASCADE,
    id_document BIGINT REFERENCES document ON DELETE CASCADE,
    PRIMARY KEY (id_projet, id_document)
);

/* ======================= 8. FABRICATION =========================== */

CREATE TABLE nomenclature_fabrication (
    id_nomenclature  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description_courte TEXT,
    description_longue TEXT
);

CREATE TABLE nomenclature_produit (
    id_nomenclature BIGINT REFERENCES nomenclature_fabrication ON DELETE CASCADE,
    id_produit      BIGINT REFERENCES produit ON DELETE CASCADE,
    quantite        NUMERIC(12,3) NOT NULL,
    PRIMARY KEY (id_nomenclature, id_produit)
);

CREATE TABLE nomenclature_document (
    id_nomenclature BIGINT REFERENCES nomenclature_fabrication ON DELETE CASCADE,
    id_document     BIGINT REFERENCES document ON DELETE CASCADE,
    PRIMARY KEY (id_nomenclature, id_document)
);

CREATE TABLE ordre_fabrication (
    id_of                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date_creation         TIMESTAMPTZ NOT NULL DEFAULT now(),
    date_echeance         TIMESTAMPTZ,
    id_statut_fabrication BIGINT REFERENCES statut_fabrication,
    id_projet             BIGINT REFERENCES projet
);

CREATE TABLE of_nomenclature (
    id_of           BIGINT REFERENCES ordre_fabrication ON DELETE CASCADE,
    id_nomenclature BIGINT REFERENCES nomenclature_fabrication ON DELETE CASCADE,
    quantite        NUMERIC(12,3) NOT NULL,
    PRIMARY KEY (id_of, id_nomenclature)
);

CREATE TABLE of_document (
    id_of       BIGINT REFERENCES ordre_fabrication ON DELETE CASCADE,
    id_document BIGINT REFERENCES document ON DELETE CASCADE,
    type_photo  TEXT CHECK (type_photo IN ('AVANCEMENT', 'REALISATION')),
    PRIMARY KEY (id_of, id_document)
);

/* ======================= 9. FINANCE (GRAND-LIVRE) ================= */

CREATE TABLE account (
    id_account   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle      TEXT NOT NULL,
    account_type TEXT NOT NULL CHECK (account_type IN ('ASSET','LIABILITY','EXPENSE','INCOME','EQUITY'))
);

CREATE TABLE ledger_line (
    id_line        BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    debit_account  BIGINT NOT NULL REFERENCES account,
    credit_account BIGINT NOT NULL REFERENCES account,
    amount_minor   BIGINT NOT NULL CHECK (amount_minor > 0),
    currency       CHAR(3) NOT NULL REFERENCES devise,
    fx_rate        NUMERIC(16,8),
    date_op        TIMESTAMPTZ NOT NULL DEFAULT now(),
    id_cat         BIGINT REFERENCES expense_category,
    memo           TEXT
);

/* ======================= 10. CAISSE PROJET ======================== */

CREATE TABLE caisse_projet (
    id_caisse      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_projet      BIGINT UNIQUE NOT NULL REFERENCES projet,
    id_account     BIGINT UNIQUE NOT NULL REFERENCES account,
    id_responsable BIGINT REFERENCES employe
);

CREATE TABLE expense_receipt (
    id_line     BIGINT PRIMARY KEY REFERENCES ledger_line ON DELETE CASCADE,
    id_document BIGINT NOT NULL REFERENCES document
);

/* Contrainte : catégories obligatoires sur dépenses de caisse */
CREATE OR REPLACE FUNCTION check_caisse_category()
RETURNS TRIGGER AS $$
BEGIN
    -- si la ligne crédite un compte caisse_projet alors id_cat doit être non null
    IF EXISTS (SELECT 1 FROM caisse_projet cp WHERE cp.id_account = NEW.credit_account) THEN
        IF NEW.id_cat IS NULL THEN
            RAISE EXCEPTION 'id_cat obligatoire pour les lignes de dépense caisse';
        END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_caisse_cat
    BEFORE INSERT OR UPDATE ON ledger_line
    FOR EACH ROW EXECUTE FUNCTION check_caisse_category();

/* ======================= 11. LOGISTIQUE =========================== */

CREATE TABLE livraison (
    id_livraison        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_move_out         BIGINT REFERENCES stock_move,
    id_move_in          BIGINT REFERENCES stock_move,
    date_livraison      TIMESTAMPTZ NOT NULL DEFAULT now(),
    id_statut_livraison BIGINT REFERENCES statut_livraison,
    id_livreur          BIGINT REFERENCES employe
);